"""
(Super)FLEXOP Gust Response Result Plotting Script

This script is used to plot and visualize simulation data generated by the FlexOP simulation.
It creates plots for different gust lengths, gust intensities, and wake discretization settings.

Usage:
- Modify the parameters in the `main()` function to match your specific simulation results and desired plots.
- Run the script to generate and display the plots.

"""

# Import necessary modules
import numpy as np
import matplotlib.pyplot as plt
import os

# Get the directory of the current script
script_dir = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))

def plot_data(list_gust_lengths, list_gust_intensity, list_cfl1, list_polars, case_string_format, results_folder):
    """
    Plot simulation data for various gust lengths, gust intensities, and wake discretization settings.

    Parameters:
    - list_gust_lengths (list): List of gust lengths to plot.
    - list_gust_intensity (list): List of gust intensities to plot.
    - list_cfl1 (list): List of CFL values for wake discretization.
    - list_polars (list): List of flags for using polar corrections.
    - case_string_format (str): Format string for generating case names.
    - results_folder (str): Path to the folder containing simulation results.
    """
    # Create subplots for different parameters
    fig, axs = plt.subplots(4, figsize=(10, 6))
    
    for i_gust_length, gust_length in enumerate(list_gust_lengths):
        for gust_intensity in list_gust_intensity:
            for cfl1 in list_cfl1:
                for polars in list_polars:
                    # Generate the file path for the data
                    file = os.path.join(results_folder, case_string_format.format(gust_length, gust_intensity, polars, cfl1) + '.txt')
                    
                    # Load data from the text file
                    data = np.loadtxt(file, delimiter=",")
                    
                    # Plot data for different parameters
                    for iparameter in range(np.shape(data)[1] - 1):
                        axs[iparameter].plot(data[2:, 0], 
                                             data[2:, iparameter + 1], 
                                             color=list_colors[i_gust_length],
                                             linestyle=get_linestyle(cfl1, polars))
    
    # Customize plot settings and labels
    for iax in range(len(axs)):
        plt.setp(axs[iax].get_xticklabels(), visible=iax == len(axs) - 1)
        axs[iax].set_ylabel(list_ylabels[iax])
        axs[iax].set_xlim([0., 2.5])
        axs[iax].grid()
    
    # Create legends for gust lengths and wake discretization settings
    handles = get_legend(list_gust_lengths, 1 in list_polars)
    
    plt.xlabel("time, s")
    plt.tight_layout()
    
    # Add legends to the plots
    lgd = axs[1].legend(ncols=1, loc='upper right', handles=handles[:len(list_gust_lengths)], bbox_to_anchor=(1.0, 1.2))
    lgd = axs[0].legend(ncols=2, loc='upper right', handles=handles[-2:], bbox_to_anchor=(1.0, 1.))
    
    # Save and display the plot
    str_name_extension = ''
    if 1 in list_polars:
        str_name_extension += '_polars'
    plt.savefig(os.path.join(results_folder, 'dynamic_gust_response{}.png'.format(str_name_extension)), bbox_extra_artists=(lgd,), bbox_inches='tight')
    plt.show()

def get_legend(list_gust_length, flag_polar_study=False):
    """
    Generate legend labels for the plots.

    Parameters:
    - list_gust_length (list): List of gust lengths.
    - flag_polar_study (bool): Flag indicating whether polar corrections are used.

    Returns:
    - list_labels (list): List of legend labels.
    """
    from matplotlib.lines import Line2D
    list_labels = []
    for igust, gust_length in enumerate(list_gust_length):
        list_labels.append(Line2D([0], [0], color=list_colors[igust], label="H = {} m".format(gust_length)))
    if flag_polar_study:
        list_labels.append(Line2D([0], [0], color='k', linestyle='dashed', label='SHARPy')) 
        list_labels.append(Line2D([0], [0], color='k', linestyle='solid', label='SHARPy + Polar Corrections'))
    else:
        list_labels.append(Line2D([0], [0], color='k', linestyle='dashed', label='Uniform Wake Discretization')) 
        list_labels.append(Line2D([0], [0], color='k', linestyle='solid', label='Variable Wake Discretization'))
    return list_labels

def get_linestyle(cfl1, polar):
    """
    Get the linestyle for the plot based on wake discretization and polar correction settings.

    Parameters:
    - cfl1 (bool): Flag indicating whether CFL is used for wake discretization.
    - polar (bool): Flag indicating whether polar corrections are used.

    Returns:
    - linestyle (str): Linestyle for the plot.
    """
    if bool(cfl1) or bool(polar):
        return '-'
    else:
        return '--'

def main():         
    # Define the results folder path
    results_folder = os.path.join(script_dir, 'results_data/')
    
    # Define simulation parameters
    u_inf = 45
    case_string_format = 'superflexop_free_gust_L_{:g}_I_{:g}_p_{:g}_cfl_{:g}'
    
    # Add 'u_inf20' to case format based on u_inf value
    if u_inf == 20:
        case_string_format += 'u_inf20'
    
    # Lists of parameters to loop over
    list_gust_lengths = [5, 10, 20, 40, 80, 100]
    list_gust_intensity = [10]
    list_cfl1 = [0] 
    list_polars = [0, 1] 
    
    # Generate and display the plots
    plot_data(list_gust_lengths, list_gust_intensity, list_cfl1, list_polars, case_string_format, results_folder)

if __name__ == '__main__':
    # Define labels, colors, and linestyles
    list_ylabels = ['$z_{tip}/s$, %', '$M_{OOP}$, Nm$^2$', '$M_{T}$, Nm$^2$', '$\Theta$, deg']
    list_colors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:brown']
    list_linestyles = ['-', '--', ':']
    
    # Run the main function
    main()
