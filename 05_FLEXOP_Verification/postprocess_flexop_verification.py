"""
Postprocessing Script for FLEXOP Simulation Results

This script is used for analyzing and processing simulation data generated by the FLEXOP  simulation.
It reads simulation results from HDF5 files, extracts relevant data, and saves it as text files.

Usage:
- Modify the parameters in the `postprocess_steady_flexop_results()` function to match your specific 
  simulation results and desired analysis.
- Run the script to process and save the data.

"""

# Import necessary modules
import os
import h5py as h5
import numpy as np
from scipy.interpolate import interp1d 

# Get the directory of the current script
script_dir = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))


def correct_torsion_by_jig_twist(y_coordinates, torsional_deformation, material='reference'):
    """
    Corrects torsional deformation by subtracting jig twist values.

    Parameters:
    - y_coordinates (numpy.ndarray): Y coordinates of the nodes.
    - torsional_deformation (numpy.ndarray): Torsional deformation data.
    - material (str): Material type ('reference' or 'tailored').

    Returns:
    - torsional_deformation (numpy.ndarray): Corrected torsional deformation data.
    """
    data_jig_twist = np.loadtxt(os.path.join(script_dir, 
                                             '../lib/flexop_model/aeroelastic_properties/jig_twist.csv'),
                                             skiprows=1,
                                             delimiter=';') 
    if material == 'reference':
        idx_material = 1
    else:
        idx_material = 2
    f_jig_twist = interp1d(data_jig_twist[:,0],
                           data_jig_twist[:,idx_material])
    for inode in range(len(y_coordinates)):
        torsional_deformation[inode] -= f_jig_twist(y_coordinates[inode])
    return torsional_deformation

def get_aero_and_structural_deformation(output_folder, case):
    """
    Extracts deformation of the structural beam and lifting surface data from a FLEXOP 
    simulation HDF5 output file.

    Parameters:
    - output_folder (str): Path to the output folder containing simulation results.
    - case (str): Name of the simulation case.

    Returns:
    - displacement (numpy.ndarray): Structural deformation data including vertical and torsional
      displacements.
    - n_node_wing (int): Number of nodes in the wing.
    """
    
    file = os.path.join(output_folder, case, 'savedata', case + '.data.h5')
    with h5.File(file, "r") as f:
        matrix_zeta = np.array(f['data']['aero']['timestep_info']['00000']['zeta']['_as_array'])[0, :,:, :]
        matrix_beam_coords = np.array(f['data']['structure']['timestep_info']['00000']['pos'])

    n_node_wing = np.argmax(matrix_beam_coords[:, 1])
    vertical_displacement = matrix_beam_coords[:n_node_wing,:]
    torsional_displacement = calculate_torsional_deformation(matrix_zeta, n_node_wing)
    torsional_displacement[:] -= torsional_displacement[0]
    torsional_displacement = correct_torsion_by_jig_twist(vertical_displacement[:,1], torsional_displacement)
    displacement = np.column_stack((vertical_displacement[:,1:],
                                    torsional_displacement))

    return displacement, n_node_wing

def load_lift_distribution(output_folder, n_node_wing, n_tsteps=0, dimensionalize=False):
    """
    Loads the resulting pressure coefficients saved in txt-files.

    Parameters:
    - output_folder (str): Path to the output folder containing simulation results.
    - n_node_wing (int): Number of nodes in the wing.
    - n_tsteps (int): Number of timesteps (0 for the last timestep).
    - dimensionalize (bool): Whether to dimensionalize the data.

    Returns:
    - lift_distribution (numpy.ndarray): Loaded lift distribution data.
    """
    lift_distribution = np.loadtxt(output_folder + '/liftdistribution/liftdistribution_ts{}.txt'.format(str(n_tsteps)), delimiter=',')
    lift_distribution = lift_distribution[:n_node_wing,[1,5]]
    if dimensionalize:
        lift_distribution[:,0] /= np.max(lift_distribution[:, 0])
    return lift_distribution[:n_node_wing,:]

def calculate_torsional_deformation(zeta, n_node_wing):
    """
    Calculate torsional deformation from the aeroelastic properties.

    Parameters:
    - zeta (numpy.ndarray): Aeroelastic properties data.
    - n_node_wing (int): Number of nodes in the wing.

    Returns:
    - torsional_deformation (numpy.ndarray): Calculated torsional deformation data.
    """
    torsional_deformation = np.zeros((n_node_wing, ))
    for inode in range(n_node_wing):
        delta_x = zeta[0,-1, inode] - zeta[0,0, inode]
        delta_z = zeta[2,-1, inode] - zeta[2,0, inode]
        torsional_deformation[inode] = -np.rad2deg(np.arctan(delta_z/delta_x))
    return torsional_deformation


def write_results(data, file_name, result_folder):  
    """
    Write processed simulation results to a text file.

    Parameters:
    - data (list(numpy.ndarray)): Processed simulation data.
    - file_name (str): Name of the output file.
    - result_folder (str): Path to the folder where results will be saved.
    """
    np.savetxt(os.path.join(result_folder,file_name), 
            data,
            delimiter=", ")

def postprocess_steady_flexop_results():    
    # Define simulation parameters
    list_case_names = ['flexop_uinf45_alpha-0400',  # 1g
                       'flexop_uinf45_alpha10400']  # 5g
    
    SHARPY_output_folder = './output/'  # Path to the folder containing simulation results
    result_folder = script_dir + '/results_data/'  # Path to the folder where processed results will be saved
    
    if not os.path.exists(result_folder):
        os.makedirs(result_folder)
    list_result = ['lift_distribution', 'displacements']
    # Loop over different simulation cases
    for icase, case_name in enumerate(list_case_names):
        displacement, n_node_wing = get_aero_and_structural_deformation(SHARPY_output_folder,  case_name)
        case_output_folder = os.path.join(SHARPY_output_folder, case_name)
        lift_distribution = load_lift_distribution(case_output_folder, n_node_wing)
        for idata, data in enumerate([lift_distribution, displacement]):
            print(idata)
            write_results(data,
                        '{}_{}.txt'.format(list_result[idata], case_name), 
                        result_folder)

if __name__ == '__main__':
    postprocess_steady_flexop_results()
